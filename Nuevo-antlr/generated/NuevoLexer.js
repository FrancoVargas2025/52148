// Generated from c:/Users/Usuario/Nuevo/Nuevo.g4 by ANTLR 4.13.2
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,26,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,0,
1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,
1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,
1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,5,21,173,8,21,10,
21,12,21,176,9,21,1,22,4,22,179,8,22,11,22,12,22,180,1,23,4,23,184,8,23,
11,23,12,23,185,1,23,1,23,4,23,190,8,23,11,23,12,23,191,1,24,1,24,1,24,1,
24,5,24,198,8,24,10,24,12,24,201,9,24,1,24,1,24,1,25,4,25,206,8,25,11,25,
12,25,207,1,25,1,25,0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
45,23,47,24,49,25,51,26,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,
95,97,122,1,0,48,57,4,0,10,10,13,13,34,34,92,92,3,0,9,10,13,13,32,32,217,
0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,53,1,0,0,0,3,62,1,0,0,0,5,70,
1,0,0,0,7,79,1,0,0,0,9,88,1,0,0,0,11,97,1,0,0,0,13,108,1,0,0,0,15,119,1,
0,0,0,17,128,1,0,0,0,19,137,1,0,0,0,21,148,1,0,0,0,23,150,1,0,0,0,25,152,
1,0,0,0,27,154,1,0,0,0,29,156,1,0,0,0,31,158,1,0,0,0,33,160,1,0,0,0,35,162,
1,0,0,0,37,164,1,0,0,0,39,166,1,0,0,0,41,168,1,0,0,0,43,170,1,0,0,0,45,178,
1,0,0,0,47,183,1,0,0,0,49,193,1,0,0,0,51,205,1,0,0,0,53,54,5,118,0,0,54,
55,5,97,0,0,55,56,5,114,0,0,56,57,5,105,0,0,57,58,5,97,0,0,58,59,5,98,0,
0,59,60,5,108,0,0,60,61,5,101,0,0,61,2,1,0,0,0,62,63,5,102,0,0,63,64,5,117,
0,0,64,65,5,110,0,0,65,66,5,99,0,0,66,67,5,105,0,0,67,68,5,111,0,0,68,69,
5,110,0,0,69,4,1,0,0,0,70,71,5,101,0,0,71,72,5,106,0,0,72,73,5,101,0,0,73,
74,5,99,0,0,74,75,5,117,0,0,75,76,5,116,0,0,76,77,5,97,0,0,77,78,5,114,0,
0,78,6,1,0,0,0,79,80,5,100,0,0,80,81,5,101,0,0,81,82,5,118,0,0,82,83,5,111,
0,0,83,84,5,108,0,0,84,85,5,118,0,0,85,86,5,101,0,0,86,87,5,114,0,0,87,8,
1,0,0,0,88,89,5,105,0,0,89,90,5,109,0,0,90,91,5,112,0,0,91,92,5,114,0,0,
92,93,5,105,0,0,93,94,5,109,0,0,94,95,5,105,0,0,95,96,5,114,0,0,96,10,1,
0,0,0,97,98,5,109,0,0,98,99,5,97,0,0,99,100,5,121,0,0,100,101,5,117,0,0,
101,102,5,115,0,0,102,103,5,99,0,0,103,104,5,117,0,0,104,105,5,108,0,0,105,
106,5,97,0,0,106,107,5,115,0,0,107,12,1,0,0,0,108,109,5,109,0,0,109,110,
5,105,0,0,110,111,5,110,0,0,111,112,5,117,0,0,112,113,5,115,0,0,113,114,
5,99,0,0,114,115,5,117,0,0,115,116,5,108,0,0,116,117,5,97,0,0,117,118,5,
115,0,0,118,14,1,0,0,0,119,120,5,108,0,0,120,121,5,111,0,0,121,122,5,110,
0,0,122,123,5,103,0,0,123,124,5,105,0,0,124,125,5,116,0,0,125,126,5,117,
0,0,126,127,5,100,0,0,127,16,1,0,0,0,128,129,5,105,0,0,129,130,5,110,0,0,
130,131,5,118,0,0,131,132,5,101,0,0,132,133,5,114,0,0,133,134,5,116,0,0,
134,135,5,105,0,0,135,136,5,114,0,0,136,18,1,0,0,0,137,138,5,114,0,0,138,
139,5,101,0,0,139,140,5,101,0,0,140,141,5,109,0,0,141,142,5,112,0,0,142,
143,5,108,0,0,143,144,5,97,0,0,144,145,5,122,0,0,145,146,5,97,0,0,146,147,
5,114,0,0,147,20,1,0,0,0,148,149,5,61,0,0,149,22,1,0,0,0,150,151,5,59,0,
0,151,24,1,0,0,0,152,153,5,123,0,0,153,26,1,0,0,0,154,155,5,125,0,0,155,
28,1,0,0,0,156,157,5,40,0,0,157,30,1,0,0,0,158,159,5,41,0,0,159,32,1,0,0,
0,160,161,5,44,0,0,161,34,1,0,0,0,162,163,5,43,0,0,163,36,1,0,0,0,164,165,
5,45,0,0,165,38,1,0,0,0,166,167,5,42,0,0,167,40,1,0,0,0,168,169,5,47,0,0,
169,42,1,0,0,0,170,174,7,0,0,0,171,173,7,1,0,0,172,171,1,0,0,0,173,176,1,
0,0,0,174,172,1,0,0,0,174,175,1,0,0,0,175,44,1,0,0,0,176,174,1,0,0,0,177,
179,7,2,0,0,178,177,1,0,0,0,179,180,1,0,0,0,180,178,1,0,0,0,180,181,1,0,
0,0,181,46,1,0,0,0,182,184,7,2,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,
1,0,0,0,185,186,1,0,0,0,186,187,1,0,0,0,187,189,5,46,0,0,188,190,7,2,0,0,
189,188,1,0,0,0,190,191,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,0,192,48,1,
0,0,0,193,199,5,34,0,0,194,198,8,3,0,0,195,196,5,92,0,0,196,198,9,0,0,0,
197,194,1,0,0,0,197,195,1,0,0,0,198,201,1,0,0,0,199,197,1,0,0,0,199,200,
1,0,0,0,200,202,1,0,0,0,201,199,1,0,0,0,202,203,5,34,0,0,203,50,1,0,0,0,
204,206,7,4,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,
1,0,0,0,208,209,1,0,0,0,209,210,6,25,0,0,210,52,1,0,0,0,8,0,174,180,185,
191,197,199,207,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class NuevoLexer extends antlr4.Lexer {

    static grammarFileName = "Nuevo.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'variable'", "'funcion'", "'ejecutar'", 
                         "'devolver'", "'imprimir'", "'mayusculas'", "'minusculas'", 
                         "'longitud'", "'invertir'", "'reemplazar'", "'='", 
                         "';'", "'{'", "'}'", "'('", "')'", "','", "'+'", 
                         "'-'", "'*'", "'/'" ];
	static symbolicNames = [ null, "VARIABLE", "FUNCION", "EJECUTAR", "DEVOLVER", 
                          "IMPRIMIR", "MAYUSCULAS", "MINUSCULAS", "LONGITUD", 
                          "INVERTIR", "REEMPLAZAR", "IGUAL", "PUNTO_COMA", 
                          "LLAVE_IZQ", "LLAVE_DER", "PAREN_IZQ", "PAREN_DER", 
                          "COMA", "MAS", "MENOS", "MULT", "DIV", "ID", "NUMERO", 
                          "NUMERO_DECIMAL", "TEXTO", "WS" ];
	static ruleNames = [ "VARIABLE", "FUNCION", "EJECUTAR", "DEVOLVER", "IMPRIMIR", 
                      "MAYUSCULAS", "MINUSCULAS", "LONGITUD", "INVERTIR", 
                      "REEMPLAZAR", "IGUAL", "PUNTO_COMA", "LLAVE_IZQ", 
                      "LLAVE_DER", "PAREN_IZQ", "PAREN_DER", "COMA", "MAS", 
                      "MENOS", "MULT", "DIV", "ID", "NUMERO", "NUMERO_DECIMAL", 
                      "TEXTO", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

NuevoLexer.EOF = antlr4.Token.EOF;
NuevoLexer.VARIABLE = 1;
NuevoLexer.FUNCION = 2;
NuevoLexer.EJECUTAR = 3;
NuevoLexer.DEVOLVER = 4;
NuevoLexer.IMPRIMIR = 5;
NuevoLexer.MAYUSCULAS = 6;
NuevoLexer.MINUSCULAS = 7;
NuevoLexer.LONGITUD = 8;
NuevoLexer.INVERTIR = 9;
NuevoLexer.REEMPLAZAR = 10;
NuevoLexer.IGUAL = 11;
NuevoLexer.PUNTO_COMA = 12;
NuevoLexer.LLAVE_IZQ = 13;
NuevoLexer.LLAVE_DER = 14;
NuevoLexer.PAREN_IZQ = 15;
NuevoLexer.PAREN_DER = 16;
NuevoLexer.COMA = 17;
NuevoLexer.MAS = 18;
NuevoLexer.MENOS = 19;
NuevoLexer.MULT = 20;
NuevoLexer.DIV = 21;
NuevoLexer.ID = 22;
NuevoLexer.NUMERO = 23;
NuevoLexer.NUMERO_DECIMAL = 24;
NuevoLexer.TEXTO = 25;
NuevoLexer.WS = 26;



